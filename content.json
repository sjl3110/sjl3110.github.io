{"meta":{"title":"个人博客","subtitle":"记录点滴，分享生活","description":"浙江大学航空航天学院","author":"沈建谅","url":"http://yoursite.com","root":"/"},"pages":[{"title":"关于","date":"2019-07-20T02:28:21.000Z","updated":"2019-07-20T08:04:14.618Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"联系方式电话：15895898063地址：浙江杭州邮箱：jianliang_shen@zju.edu.cn仓库：https://github.com/sjl3110 教育背景本科：南京理工大学硕士：浙江大学 专业技能嵌入式硬件电路设计ARM Linux系统开发操作系统应用软件开发"},{"title":"所有标签","date":"2019-07-20T01:58:15.000Z","updated":"2019-07-20T02:23:10.772Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2019-07-20T02:00:55.000Z","updated":"2019-07-20T02:23:25.822Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"编译内核用到的图形界面工具","slug":"编译内核用到的图形界面工具","date":"2019-07-22T09:48:33.000Z","updated":"2019-07-23T07:13:49.515Z","comments":true,"path":"2019/07/22/编译内核用到的图形界面工具/","link":"","permalink":"http://yoursite.com/2019/07/22/编译内核用到的图形界面工具/","excerpt":"menuconfig运行在没有桌面环境的主机上，可以查看选项功能，不支持搜索，需要安装终端的图形包。 12$ make menuconfig $ sudo apt-get install libncurses5-dev","text":"menuconfig运行在没有桌面环境的主机上，可以查看选项功能，不支持搜索，需要安装终端的图形包。 12$ make menuconfig $ sudo apt-get install libncurses5-dev xconfig可以查看选项功能，支持搜索功能，需要安装QT依赖包。 12345$ make xconfig$ CHECK qt$ Could not find Qt via pkg-config.$ Please install either Qt 4.8 or 5.x. and make sure it&apos;s in PKG_CONFIG_PATH$ apt-get install qt4-dev-tools 安装后运行如下： gconfig可以查看选项功能，需要安装gtk的包。 123456$ make gconfig$ Unable to find the GTK+ installation. Please make sure that$ the GTK+ 2.0 development package is correctly installed...$ You need gtk+-2.0, glib-2.0 and libglade-2.0.$ sudo apt-get install libgtk2.0-dev libglib2.0-dev libglade2-dev 安装后运行如下：","categories":[{"name":"嵌入式","slug":"嵌入式","permalink":"http://yoursite.com/categories/嵌入式/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"kernel","slug":"kernel","permalink":"http://yoursite.com/tags/kernel/"}]},{"title":"使用VScode和Cmake搭建嵌入式开发环境","slug":"使用VScode和Cmake搭建嵌入式开发环境","date":"2019-07-22T09:45:53.000Z","updated":"2019-07-23T07:14:25.565Z","comments":true,"path":"2019/07/22/使用VScode和Cmake搭建嵌入式开发环境/","link":"","permalink":"http://yoursite.com/2019/07/22/使用VScode和Cmake搭建嵌入式开发环境/","excerpt":"配置主机开发环境1) 安装Ubuntu 16.04操作系统，双系统、虚拟机、单系统或windows子系统2) 安装TI SDK并配置交叉编译环境，并配置环境变量3) 安装SecureCRT或者minicom等串口软件，运行secureCRT或者minicom均需要超级权限sudo。4) 配置有线以太网地址（ipv4） 1234Address:192.168.111.101Netmask:255.255.255.0Gateway:192.168.111.1DNS:4.4.4.4","text":"配置主机开发环境1) 安装Ubuntu 16.04操作系统，双系统、虚拟机、单系统或windows子系统2) 安装TI SDK并配置交叉编译环境，并配置环境变量3) 安装SecureCRT或者minicom等串口软件，运行secureCRT或者minicom均需要超级权限sudo。4) 配置有线以太网地址（ipv4） 1234Address:192.168.111.101Netmask:255.255.255.0Gateway:192.168.111.1DNS:4.4.4.4 配置项目工程Linux可以使用许多IDE，甚至可以脱离集成开发环境通过撰写Makefile管理项目文件。 Makefile假设工程文件中包括main.c、spi.c以及head.h，为了生成可执行文件，需要生成main.c和spi.c的链接文件main.o和spi.o，而main.o和spi.o也需要编译生成。这个过程就是makefile的执行过程。以下为Makefile的内容： 12345678910CC=gcc //gcc或者交叉编译gccOBJ=main.o spi.o //OBJ是生成的链接文件目标，作为变量方便main: $(OBJ) //main可执行文件的生成需要OBJ中的两个文件 $(CC) -o $@ $^ // -o表示生成可执行文件 $@表示目标文件（main）；$^表示所有依赖文件（OBJ）spi.o: spi.c head.h $(CC) -c $&lt; // $&lt; 表示第一个依赖文件（spi.c）main.o: main.c head.h $(CC) -c $&lt;clean: //make clean删除通过make指令生成的文件 rm main $(OBJ) VScode + Cmake当项目内容比较多时，可以通过CMake工具自动生成Makefile。Cmake主要配置CMakeLists.txt实现工程管理。推荐通过VScode生成CMake项目模板，过程如下：安装CMake插件；Ctrl+Shift+P，输入CMAKE QUICK START，选择gcc的kit，一般会自己查询到gcc或者交叉编译工具gcc，输入工程名称，再选择生成可执行文件。这样VScode就会生成项目模板。项目主要分为src、include、bin、build等文件夹，文件夹内容如下： 123456789101112|——zhx_cmake_prj #ZHX项目主要软件 |——bin #可执行文件夹目录 |——build #build目录 |——include #头文件目录 |——src #项目源文件 |——driver #设备驱动源文件目录 |——spi |——uart |... |——main.c |——CMakeLists.txt |——CMakeLists.txt CMakeLists主目录下的配置： 123456cmake_minimum_required (VERSION 3.0.0)project(ZHX VERSION 0.1.0)MESSAGE (STATUS \"This is the binary dir: \" $&#123;PROJECT_BINARY_DIR&#125;)MESSAGE (STATUS \"This is the source dir: \" $&#123;PROJECT_SOURCE_DIR&#125;)INCLUDE_DIRECTORIES (include) //添加include路径ADD_SUBDIRECTORY(src) //添加src子目录 二级CMakeLists.txt（src文件夹下）： 123456AUX_SOURCE_DIRECTORY(. SRC_LIST) //添加当前目录为源码编译目录AUX_SOURCE_DIRECTORY(./driver/spi/ SRC_LIST)AUX_SOURCE_DIRECTORY(./driver/i2c/ SRC_LIST)AUX_SOURCE_DIRECTORY(../include/ SRC_LIST) //添加include为源码编译目录ADD_EXECUTABLE(main $&#123;SRC_LIST&#125; ) //通过源码目录中的所有依赖文件生成可执行文件mainSET(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin) //将main输出至bin文件夹下 文件编译方式1234$ cd ($PRJ)/build $ cmake .. $ make$ cd ($PRJ)/bin 配置开发板制作SD卡运行$tisdk/bin/creat-sdcard.sh，替换zImage以及设备树文件。 远程登录与传递文件123$ ifconfig eth0 192.168.111.100$ ssh root@192.168.111.100$ scp file root@192.168.111.100:~ 如果显示ssh无法登陆，原因是当前ip地址与开发板的上一次刷的系统配置的ip地址冲突，使用以下命令删除旧的配置： 1$: ssh-keygen –f “/home/usr-name/.ssh/known_hosts” –R “192.168.111.100” 固定目标板的IP地址修改/etc/systemd/network/目录下的10-eth.network文件： 1234567[Match]Name=eth0KernelCommandLine=!root=/dev/nfs[Network]Address=192.168.111.100/24Gateway=192.168.111.1 串口收发文件目标板没有安装ssh时，通过TCP/IP无法传输文件，在文件容量较小的情况下可以使用lrzsz工具。Lrzsz工具解压后使用./configure命令配置makefile，在主机中需要将bin、src以及根目录下的makefile中的CC均改为交叉编译链，再在主目录中make，最后将src/lrz和src/lsz拷贝至目标板的/bin文件夹下。1) 主机向从机发送文件：从机运行lrz，主机选择通过zModem发送，（minicom中通过Ctrl+A-Z-S进入）文件将保存在从机当前目录下；2) 从机向主机发送文件：主机运行lrz（使用主机的gcc编译），从机运行： 1$ lsz file","categories":[{"name":"嵌入式","slug":"嵌入式","permalink":"http://yoursite.com/categories/嵌入式/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"vscode","slug":"vscode","permalink":"http://yoursite.com/tags/vscode/"}]},{"title":"ARM Linux开发命令","slug":"ARM Linux开发命令","date":"2019-07-22T09:45:47.000Z","updated":"2019-07-23T07:14:30.268Z","comments":true,"path":"2019/07/22/ARM Linux开发命令/","link":"","permalink":"http://yoursite.com/2019/07/22/ARM Linux开发命令/","excerpt":"使用开发板版本：TI AM5728 EVM使用SDK版本：ti-processor-sdk-linux-rt-am57xx-evm-05.02.00.10官方软件支持：RT-Linux-software官方软件使用说明(更新至6.00.00.07,2019年7月)：TISDKTI中文社区：e2echina.ti创龙论坛：51ele","text":"使用开发板版本：TI AM5728 EVM使用SDK版本：ti-processor-sdk-linux-rt-am57xx-evm-05.02.00.10官方软件支持：RT-Linux-software官方软件使用说明(更新至6.00.00.07,2019年7月)：TISDKTI中文社区：e2echina.ti创龙论坛：51ele 内核编译命令1234make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- tisdk_am57xx-evm-rt_defconfig make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfigmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage -j16make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- distclean 生成的zImage替换/rootfs/boot下的zImage文件。 内核源码内核功能裁剪思路设备树改写命令1make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- am57xx-evm-reva3.dtb -j8 源码位置：$tisdk/arch/arm/boot/dts/am57xx-beagle-x15-common.dtsi等。生成的am57xx-evm-reva3.dtb替换/rootfs/boot下的设备树文件。 编译模块12make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- modules -j16sudo make ARCH=arm INSTALL_MOD_PATH=../rootfs modules_install 模块的版本要与内核一致，所以要编译模块。加载模块指令：insmod。卸载模块指令。","categories":[{"name":"嵌入式","slug":"嵌入式","permalink":"http://yoursite.com/categories/嵌入式/"}],"tags":[{"name":"arm","slug":"arm","permalink":"http://yoursite.com/tags/arm/"},{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"初中往事--初二篇","slug":"初中往事-初二","date":"2019-07-21T08:29:32.000Z","updated":"2019-07-23T07:13:58.176Z","comments":true,"path":"2019/07/21/初中往事-初二/","link":"","permalink":"http://yoursite.com/2019/07/21/初中往事-初二/","excerpt":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;恰同学少年，风华正茂。","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;恰同学少年，风华正茂。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;都说初二是道槛，很多学生会在初二成绩下滑，又有很多人异军突起。刚开始我还不怎么相信，现在想想，初二刚刚摆脱刚来时带着小学时代的稚气，又尝试学习高年级带来的社会气，环境的变化导致人的变化，也就不是什么稀奇事了。 黄正寅&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;刚开学就听说老黄体罚学生很狠，抽耳光到学生原地转圈，连踢带踹将学生从前门踹到后门，就连刚刚分班的几个刺头都对老黄畏畏缩缩。然鹅一年里我都没怎么见他体罚过人，问题应该出在我身上。第一次班会课，老黄笑眯眯问我愿不愿意当班长，我说不愿意，然后混了个副班长，从此开始了罪恶的一年。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……………..","categories":[{"name":"回忆","slug":"回忆","permalink":"http://yoursite.com/categories/回忆/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/tags/生活/"},{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"},{"name":"流水账","slug":"流水账","permalink":"http://yoursite.com/tags/流水账/"}]},{"title":"初中往事--初一篇","slug":"初中往事-初一","date":"2019-07-20T15:07:51.000Z","updated":"2019-07-23T07:14:05.805Z","comments":true,"path":"2019/07/20/初中往事-初一/","link":"","permalink":"http://yoursite.com/2019/07/20/初中往事-初一/","excerpt":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每当陷入回忆时，彷佛能闻到当初课桌旁边墙上粉刷绿漆的味道。","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每当陷入回忆时，彷佛能闻到当初课桌旁边墙上粉刷绿漆的味道。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;语文老师高井华第一次上课，提到啥概念都来一句，“这个怎么说呢？很抽象……”。当初觉得不明所以，硬是把语文文言文当作数学公式来背，可那又怎样，我还是学不会语文。但或许偏科太严重，数学课我倒是应付自如，甚至在吴善林讲题目的时候打岔，抢先说出答案。直到有一天被他拉出去揍了一顿，此后我最恨上课有人打岔，大概是联想到自己的丢人的往事。至于地理生物课，我倒是上的津津有味，我很喜欢自然，一度特别想拥有一台属于自己的显微镜。我自己偷偷买了个地球仪，那段时间上面但凡标的海峡、海湾、山脉、高原我是滚瓜烂熟，这让代上地理课的语文老师十分吃惊。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生活有了起伏的是第一次月考，我一下子考进了年级前十，班级第一（我后来很喜欢这种杀出一片天的感觉，但是到了成年人的世界走出校园，再也没有这种洋洋洒洒挥斥方遒的气概了）。然后班主任迅速撤了原先班长大权，给我安上所谓“纪律班长”一职，可谓拥有无与伦比的“生杀予夺大权”。可能在那老师的眼里，成绩好的学生应该地位高点，但我后来觉得这种教育观念显然有误。在担当“纪委”班长重任的两个月，中间我期中考试又快意了一把，顿时飘了膨胀了，很快成绩退步班长被撤职，班主任逐渐宠爱另一个作文拿到市奖的葛杰（普通话不标注的英语老师喊作“咯叽”）。这件事让我感触很大，回家贴了个纸条“火要空心，人要虚心”在课桌前，发誓一定要打败他，或许这也算一种中二吧，但其实打败他非常容易，以至于之后都没再将他在竞争对手之位。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说起来，初中男女同桌还是很普遍的，我那时候极其不适应这种事情，但是跟男生同桌又会打架。于是老班把我跟班上“姿色”最好的一个安排坐一块，刚开始这人还很认真学习，可能受到我这个“班级第一”气势的压迫。可惜人总是懒惰的，那位女生（施佳佳）不是块读书的料，偏偏家里父母在日本做生意，班主任的钱是管够，所以老师也很宠她。我少不经事，又喜欢拿着鸡毛当令箭，但凡发现她自习课讲话，就大公无私地把她名字划到黑板上，这让老师十分没面子以至于暗示我甭管她。她喜欢看小人书，喜欢偷偷化妆照镜子，我是及其感到怪异，可能她早熟得是真的厉害。她时长嗲声嗲气的跟我求作业抄，我一边无法拒绝（不给就哭谁受得了），一边给老师暗示她老要抄我作业，但老师表示，钱拿了就没事了。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实让我厌恶这人的原因还是源于，之前说的葛杰喜欢上了这个女生，还tm搞暗恋，暗恋也就算了，递情书倒是闹得满城风雨。这我当时并不清楚，同时还和这女生冲突日益尖锐，毕竟这人影响老子学习，所以但凡是不是我有意无意弄哭她，葛杰都要在班级扬言要揍我一顿，然后这女生就非常得意，但实际上到她转学都没有跟葛杰有任何亲密来往，这也许就是所谓的舔狗不得house吧。但舔狗也会爬起来报复对方的，后来施佳佳在男生当中的地位一落千丈，再也没有所谓大姐头的风范（马仔发现自己是备胎，那肯定叛变啊），连一众平庸心怀鬼胎的女生都可以肆意欺负她，甚至给她作业抄都要收费的程度。虽然那时老师已经将我调开，但我觉得如此欺侮一个人还是不妥，我硬着头皮跟葛杰提起此事，他表示“爱过”，然后无动于衷。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;班主任可能觉得我欺负他宠爱的女生，趁着撤我班长职位的时候釜底抽薪，将班上所有男生觉得最“丑”的女生安排在我旁边，为此当时少不被男生嘲笑。其实她并不是多难看，而且生的丹凤眼，只可惜可能也是农村来的，晒得很黑。这个新同桌很是上进，可是学习效率着实有问题，我这人好为人师，指点一番后，大概觉得朽木不可雕，遂置之不理。但她反而督促起我的学习起来，甚至我开小差都跟老师打报告。直到有一天我忍无可忍骂了她，我的新同桌又又又来了… &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;初一最后一任同桌是小学同学，名字我还记得叫周海燕，阿列克塞马克西莫维奇也就是高尔基写的文章里的。所以大家都会用朗诵的口吻呼唤她，“啊，海燕…”想想还是很有趣。这个女生是非常暴躁的，小学就把班上的男生欺负哭，所以我跟她是真的旗鼓相当，那时候的课桌我拍一下她拍一下，中间挡板上方都拍弯了。这也侧面反映出老师为了给我找个合适同桌的用心良苦。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我感觉我错过了初中很多有意思的事情，可能我太过于注重学习和读书。比如那时候有些男生特别喜欢耍酷装B，那时候QQ也刚刚兴起，女生也有情窦初开的，于我而言，这些都比不上读书重要。我当时立志于去市里读书，虽然梦想起点很小，但毕竟付诸实践了。","categories":[{"name":"回忆","slug":"回忆","permalink":"http://yoursite.com/categories/回忆/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/tags/生活/"},{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"},{"name":"流水账","slug":"流水账","permalink":"http://yoursite.com/tags/流水账/"}]},{"title":"初中往事--初识镇中","slug":"初中往事-初识镇中","date":"2019-07-20T04:52:37.000Z","updated":"2019-07-23T07:14:02.009Z","comments":true,"path":"2019/07/20/初中往事-初识镇中/","link":"","permalink":"http://yoursite.com/2019/07/20/初中往事-初识镇中/","excerpt":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果让我选择一段可以回溯的时光，我一定选择初中，因为那是我最自在的岁月。","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果让我选择一段可以回溯的时光，我一定选择初中，因为那是我最自在的岁月。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;08年的五月，我妈一边犹豫着该不该让我尝试报考市一中，我一边漫不经心地看着自己偷偷买的奥林匹克竞赛培训书，希望能在小升初的数学试卷上多拿几分。之后我跟小伙伴去市里考试，第一次见到市二小如此宽敞明亮的教室，我暗自给自己定下目标，我有机会一定要去市里读书！考试的时候依旧死在语文上，至今依稀记得，陈毅的毅字不会写，考完后问同学还被鄙视。数学考试我带上了计算器，但因为老师检查桌肚颇为严厉，吓得我上厕所时藏到卫生间水池下面去了。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;放榜那天，我妈兴冲冲地跟我说我考上了，200分考到了140多，还说哪怕在我读的小学中参考的学生中也颇为优秀。这种事发生在那种环境下的“我”身上，恨不得路人皆知。然而事情并没有想象中的那么顺利，我妈咨询了之后才知道，乡镇的学生学费是很贵的，我妈又不愿意让我住校，如果搬到市里生活开销也比较大，我妈一考虑也就放弃了，尽管当时班主任力劝去市里读书，尽管这人得知我也能考上后表示十分不可思议，回头我再专门写一篇文章说说小学班主任陈井国。那个邻居得知后，大概是过程出乎了意料，但结局他觉得比较满意，换做我如果如此势利，我就会说“就说嘛，考上了也上不了”。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;小学毕业考试完了，我妈带着我去镇中报道，又给我借来几本初一的教材，我把语文教材里有趣的文章翻来覆去看了好几遍，像《比萨斜塔》这类的文章，讲伽利略生平的尤其喜欢，现在想来，我的确不适合学语文。当时自己学了点初等数学里的负数、绝对值等简单内容，我觉得太简单了没有丝毫难度可言。至于英语，当时还有预备教材，暑假里我妈让我去了镇里精神病院后面破落的学校里面补习班上课，那英语老师的发音，大概是我听过的最难听的几位老师之一了。我记得还向他扔粉笔头被逮到过，他问我为啥上课不听讲，我直言你讲课发音太难听，那老师竟然还承认了，意思没办法混口饭，我当时不知道那位年轻的老师为何跟我这种小屁孩说这种话，现在想想，这大概就是生活所迫吧。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;开学后，我对新学校是非常地失望。尘土飞扬的操场，一到下雨不是一般的泥泞，给我双破鞋我都舍不得下脚。更不提那低矮的教学楼，初一是平房，初二是二层破楼房，初三的教学楼地砖磨得可以给大姑娘拿去化妆了。拥挤的教师，残破的桌椅，头上的吊扇时常让人担心什么时候它转着掉下来导致生灵涂炭，教室门口的台阶露出里面砖头的棱角，旁边的花坛杂草丛生，甚至曾有学生被蛇咬过。我当时十分向往的市一中南校区塑胶跑道，连绵的洋红色教学楼全成了白日梦！哦对了，还有那难吃的食堂，韭菜炒蛋都是糊的！ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但我不后悔在镇中读书！","categories":[{"name":"回忆","slug":"回忆","permalink":"http://yoursite.com/categories/回忆/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/tags/生活/"},{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"},{"name":"流水账","slug":"流水账","permalink":"http://yoursite.com/tags/流水账/"}]},{"title":"如何利用hexo和github搭建免费个人博客","slug":"如何利用hexo和github搭建免费个人博客","date":"2019-07-19T14:30:53.524Z","updated":"2019-07-23T07:14:20.263Z","comments":true,"path":"2019/07/19/如何利用hexo和github搭建免费个人博客/","link":"","permalink":"http://yoursite.com/2019/07/19/如何利用hexo和github搭建免费个人博客/","excerpt":"文章转载来自使用 Hexo + Github 搭建自己的博客（图文教程）替换主题参考Hexo 安装和替换主题、自定义博客主题","text":"文章转载来自使用 Hexo + Github 搭建自己的博客（图文教程）替换主题参考Hexo 安装和替换主题、自定义博客主题 搭建过程安装git node.js查看版本命令用 12$ npm -v$ node -v 新建仓库新建一个repository，名称为 name.github.io 安装Hexo1234567$ npm install hexo -g$ hexo -v$ hexo init$ npm install$ hexo g$ hexo s #查看本地新建的hexo$ npm install hexo-deployer-git --save 修改_config.yml1234deploy: type: git repository: git@github.com:sjl3110/sjl3110.github.io.git branch: master 建立ssh密钥1ssh-keygen -t rsa -C \"mail@xx.com\" 并将默认保存位置的id_rsa.pub内容存放到github网站中的SSH密钥中。 维护过程12$ hexo new post \"blog-name\"$ hexo d -g","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"}]},{"title":"基于TCP/IP网络socket通信","slug":"基于TCP-IP网络socket通信","date":"2019-07-19T13:55:15.200Z","updated":"2019-07-23T07:14:14.052Z","comments":true,"path":"2019/07/19/基于TCP-IP网络socket通信/","link":"","permalink":"http://yoursite.com/2019/07/19/基于TCP-IP网络socket通信/","excerpt":"网络传输文件现有的工具为ssh或者tcp指令，ssh中的scp指令如下： 1$ scp file name@IP:file_path 测试在百兆带宽的情况下，可以达到5~6MB/s。SSH的用户层工作原理，除去登陆密码以及公钥或者私钥的建立，底层的工作模式也需要考虑。","text":"网络传输文件现有的工具为ssh或者tcp指令，ssh中的scp指令如下： 1$ scp file name@IP:file_path 测试在百兆带宽的情况下，可以达到5~6MB/s。SSH的用户层工作原理，除去登陆密码以及公钥或者私钥的建立，底层的工作模式也需要考虑。 网络设备驱动网络层次七层又可以分为应用层（应用层、表示层与会话层）、传输层、网络层、数据链路层以及物理层。网络设备驱动负责将数据包写入网络或者从网络中读取数据包，从而完成上层的请求，与其他接口开发的不同是 网络设备不在/dev下创建设备文件； 底层采用中断的工作方式，并将中断传递给上层应用程序（这与UART类似）。 内核配置—&gt; Networking support &gt; Networking options网络功能选择：在内核中配置EtherNet网口支持的功能。 内核选项 含义 Packet socket 支持Socket通信 Unix domain sockets Socket进程间通信 TCP/IP networking TCP/TP网络协议 IP:multicasting 组播，多目标发送 IP:advanced router 高级路由，流量控制 IP:kernel level autoconfiguration 内核启动时自动获取IP IP:DHCP suppo DHCP 获取动态IP协议 IP:BOOTP support DHCP的前身 IP:RARP support 反向地址转换协议 — &gt; Device Drivers &gt; Network device support ─ Ethernet driver support配置芯片驱动：选择对应厂商的芯片，若没有需要写适配的驱动源码！ 设备树配置直接引用dra7.dtsi设备树源文件中的以太网寄存器配置。 12345678&amp;davinci_mdio &#123; phy0: ethernet-phy@1 &#123; reg = &lt;1&gt;; &#125;; phy1: ethernet-phy@2 &#123; reg = &lt;2&gt;; &#125;;&#125;; 传输协议数据传输协议 服务端accept()函数为阻塞函数，主进程执行至accept后进程阻塞，直到客户端发出连接请求； 接收请求后使用fork()函数创建子进程，这样就可以通过不同的子进程连接多个客户端； Send()函数将指定长度数据发送至内存缓冲队列，发送后等待对方确认（客户端确认和服务端重新发送在底层完成）； recv()函数也是阻塞函数，在队列中没有数据时，recv()进程进入阻塞，recv()成功读取则返回读取长度。 文件传输协议 缓冲区长度有限，若客户端不执行recv()则服务端发送一定量的数据包后停止发送； 客户端需要加入文件末尾判断的语句； 若 T1&gt;T2，则recv()函数并不能一次读取设定长度的数据，即有多少读多少，增加了客户端读取循环的次数，降低了传输效率； 测试与改进实际测试：文件长度50160000，约50MB；网络带宽100Mb，上限约12.5MB/s。设每次发送10000Byte，测得：服务端发送5016个数据包，客户端每次接收1000–10000长度不等的包，实际接收了13000个数据包，最终传输速率为2MB/s。改进：每次recv()先与对方确认包的长度，并将内容读满再返回，配置MSG_WAITALL。测试结果：服务端发送5016个数据包，客户端接收了5016个数据包，最终传输速率为10–12MB/s。 配置数据包 在应用层编写实现类似底层包的组帧结构的协议，可以完成多个文件的收发； 由于组包与解包的加入，速度略有牺牲，测试速度约为4~5MB/s。 应用程序服务端 server.c 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include &lt;stdio.h&gt;#include &lt;netinet/in.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;#include &lt;fcntl.h&gt;#include &lt;sys/shm.h&gt;#include &lt;time.h&gt;#define PORT 8888#define QUEUE_SIZE 10#define BUFFER_SIZE 10000//传进来的sockfd，就是互相建立好连接之后的socket文件描述符//通过这个sockfd，可以完成 [服务端]&lt;---&gt;[客户端] 互相收发数据void transfer_file(int sockfd)&#123; FILE *fp; int ch; time_t t_start, t_end; int send_num; long length = 0; //char name[LEN]; // storage for output filename int count = 0; fp = fopen(\"test.txt\", \"r\"); if (fp == NULL) &#123; fprintf(stderr, \"couldn't open the file \\n\"); exit(EXIT_FAILURE); &#125; fseek(fp, 0L, SEEK_END); //将文件指针移到末尾 length = ftell(fp); //获取文件长度 printf(\"%ld\\n\", length); char str[10]; sprintf(str, \"%ld\", length); //将文件长度转换为字符串str send(sockfd, str, sizeof(str), 0); //将文件长度发送给client char buffer1[BUFFER_SIZE]; recv(sockfd, buffer1, sizeof(buffer1), 0); //等待对方读取完长度后返回“ready” if (strcmp(buffer1, \"ready\") == 0) &#123; fseek(fp, 0L, SEEK_SET); //文件指针移到开头 // char buffer[1]; // copy data // while ((ch = getc(fp)) != EOF) // &#123; // buffer[0] = ch; // send(sockfd, buffer, 1, 0); // &#125; t_start = time(NULL); //获取开始时间 char buffer[BUFFER_SIZE]; //新建缓存 send_num = 0; //计算发送包的个数 while (fread(buffer, sizeof(buffer), 1, fp)) //fread 读文件到缓存，读到末尾会EOF（-1） &#123; //printf(\"send%d %ld\\n\",send_num,sizeof(buffer)); send(sockfd, buffer, sizeof(buffer), 0); //发送一个文件包 send_num++; //break; &#125; t_end = time(NULL); //获取结束时间 printf(\"send %d times\\n\", send_num); printf(\"speed: %.02f MB/s\\n\", length / 1024 / 1024 / difftime(t_end, t_start)); if (fclose(fp) != 0) //关闭文件 fprintf(stderr, \"Error in closing files\\n\"); &#125; else &#123; printf(\"cannot get start!\\n\"); &#125;&#125;int str_echo(int sockfd) //回环函数&#123; char buffer[BUFFER_SIZE]; //新建内存缓冲区 pid_t pid = getpid(); while (1) &#123; memset(buffer, 0, sizeof(buffer)); //将内存缓冲区清0，初始化 int len = recv(sockfd, buffer, sizeof(buffer), 0); printf(\"pid:%d receive:\\n\", pid); fputs(buffer, stdout); if (strcmp(buffer, \"exit\\n\") == 0) &#123; printf(\"child process: %d exited.\\n\", pid); printf(\"the server shutdown.\\n\"); break; &#125; if (strcmp(buffer, \"send\\n\") == 0) &#123; printf(\"start transfer.\\n\"); transfer_file(sockfd); printf(\"transfer end.\\n\"); //sleep(10); //printf(\"the server shutdown.\\n\"); continue; &#125; send(sockfd, buffer, len, 0); &#125; close(sockfd); return -1;&#125;int main(int argc, char **argv)&#123; //定义IPV4的TCP连接的套接字描述符 int server_sockfd = socket(AF_INET, SOCK_STREAM, 0); //定义sockaddr_in struct sockaddr_in server_sockaddr; server_sockaddr.sin_family = AF_INET; server_sockaddr.sin_addr.s_addr = htonl(INADDR_ANY); server_sockaddr.sin_port = htons(PORT); //bind成功返回0，出错返回-1 if (bind(server_sockfd, (struct sockaddr *)&amp;server_sockaddr, sizeof(server_sockaddr)) == -1) &#123; perror(\"bind\"); exit(1); //1为异常退出 &#125; printf(\"bind success.\\n\"); //listen成功返回0，出错返回-1，允许同时帧听的连接数为QUEUE_SIZE if (listen(server_sockfd, QUEUE_SIZE) == -1) &#123; perror(\"listen\"); exit(1); &#125; printf(\"listen success.\\n\"); for (;;) &#123; struct sockaddr_in client_addr; socklen_t length = sizeof(client_addr); //进程阻塞在accept上，成功返回非负描述字，出错返回-1 int conn = accept(server_sockfd, (struct sockaddr *)&amp;client_addr, &amp;length); if (conn &lt; 0) &#123; perror(\"connect\"); exit(1); &#125; printf(\"new client accepted.\\n\"); pid_t childid; if (childid = fork() == 0) //子进程 &#123; printf(\"child process: %d created.\\n\", getpid()); close(server_sockfd); //在子进程中关闭监听 if (str_echo(conn) &lt; 0) //处理监听的连接 &#123; exit(0); //对方发送exit，返回-1，关闭子进程，主进程继续accep &#125; &#125; &#125; printf(\"closed.\\n\"); close(server_sockfd); printf(\"end\\n\"); exit(0); return 0;&#125; 客户端编译后执行： 12$ ifconfig eth0 192.168.111.101$ ./server 客户端 client.c 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include &lt;stdio.h&gt;#include &lt;netinet/in.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;#include &lt;fcntl.h&gt;#include &lt;sys/shm.h&gt;#include &lt;time.h&gt;#define PORT 8888#define BUFFER_SIZE 10000int main(int argc, char **argv)&#123; if (argc != 2) &#123; printf(\"usage: client IP \\n\"); exit(0); &#125; //定义IPV4的TCP连接的套接字描述符 int sock_cli = socket(AF_INET, SOCK_STREAM, 0); FILE *out; time_t t_start, t_end; long i, receive_length, file_length, length; int receive_num; //定义sockaddr_in struct sockaddr_in servaddr; memset(&amp;servaddr, 0, sizeof(servaddr)); servaddr.sin_family = AF_INET; servaddr.sin_addr.s_addr = inet_addr(argv[1]); servaddr.sin_port = htons(PORT); //服务器端口 //连接服务器，成功返回0，错误返回-1 if (connect(sock_cli, (struct sockaddr *)&amp;servaddr, sizeof(servaddr)) &lt; 0) &#123; perror(\"connect\"); exit(1); &#125; printf(\"connect server(IP:%s).\\n\", argv[1]); char sendbuf[BUFFER_SIZE]; char recvbuf[BUFFER_SIZE]; memset(sendbuf, 0, sizeof(sendbuf)); memset(recvbuf, 0, sizeof(recvbuf)); //客户端将控制台输入的信息发送给服务器端，服务器原样返回信息 while (fgets(sendbuf, sizeof(sendbuf), stdin) != NULL) //捕获命令行的字符串到sendbuf &#123; memset(recvbuf, 0, sizeof(recvbuf)); send(sock_cli, sendbuf, strlen(sendbuf), 0); ///发送 if (strcmp(sendbuf, \"exit\\n\") == 0) &#123; printf(\"client exited.\\n\"); break; &#125; if (strcmp(sendbuf, \"send\\n\") == 0) &#123; if ((out = fopen(\"out.txt\", \"w\")) == NULL) &#123; // open file for writing fprintf(stderr, \"Can't create output file.\\n\"); exit(3); &#125; recv(sock_cli, recvbuf, sizeof(recvbuf), 0); file_length = atoi(recvbuf); memset(recvbuf, 0, sizeof(recvbuf)); //获取文件长度 memset(sendbuf, 0, sizeof(sendbuf)); send(sock_cli, \"ready\", 5, 0); //发送就绪 printf(\"receive file start.\\n\"); t_start = time(NULL); length = 0; receive_num = 0; while (length &lt; file_length) &#123; receive_length = recv(sock_cli, recvbuf, sizeof(recvbuf), MSG_WAITALL); ///接收 //MSG_WAITALL是强行等待缓冲满再结束 //sleep(1); //printf(\"%d length %d\\n\", receive_num,receive_length); //fputs(recvbuf, stdout); //printf(\"run dot1\\n\"); //for (i = 0; i &lt; receive_length; i++) //&#123; //putc(recvbuf[i], out); //&#125; fprintf(out, \"%s\", recvbuf); //memset(sendbuf, 0, sizeof(sendbuf)); memset(recvbuf, 0, sizeof(recvbuf)); //printf(\"run\\n\"); length = length + receive_length; receive_num++; //break; &#125; printf(\"receive %d times\\n\", receive_num); if (fclose(out) != 0) fprintf(stderr, \"Error in closing files\\n\"); t_end = time(NULL); printf(\"time : %.2f s\\n\", difftime(t_end, t_start)); printf(\"speed: %.02f MB/s\\n\", file_length / 1024 / 1024 / difftime(t_end, t_start)); printf(\"receive file end.\\n\"); continue; &#125; printf(\"client receive:\\n\"); recv(sock_cli, recvbuf, sizeof(recvbuf), 0); ///接收 fputs(recvbuf, stdout); memset(sendbuf, 0, sizeof(sendbuf)); &#125; close(sock_cli); return 0;&#125; 服务端编译后执行： 12345$ ifconfig eth0 192.168.111.100$ ./client 192.168.111.101$ mesg //对方回环$ send //对方发送文件$ exit //对方关闭服务子进程，客户端退出","categories":[{"name":"嵌入式","slug":"嵌入式","permalink":"http://yoursite.com/categories/嵌入式/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"socket","slug":"socket","permalink":"http://yoursite.com/tags/socket/"}]},{"title":"Windows系统配置Linux子系统开发ARM","slug":"Windows系统配置Linux子系统开发ARM","date":"2019-07-19T11:42:09.451Z","updated":"2019-07-23T07:14:34.386Z","comments":true,"path":"2019/07/19/Windows系统配置Linux子系统开发ARM/","link":"","permalink":"http://yoursite.com/2019/07/19/Windows系统配置Linux子系统开发ARM/","excerpt":"Win10可以支持Ubuntu子系统，再也不需要虚拟机！ 安装系统系统要求：最新版win10，打开应用商店安装Ubuntu应用软件，需要系统开启虚拟机功能以及LINUX子系统功能。安装完成后如下：","text":"Win10可以支持Ubuntu子系统，再也不需要虚拟机！ 安装系统系统要求：最新版win10，打开应用商店安装Ubuntu应用软件，需要系统开启虚拟机功能以及LINUX子系统功能。安装完成后如下： 配置 Ubuntu换源等操作。 12345678910111213141516$ cd /etc/apt$ sudo cp sources.list sources.list.bak$ sudo vi sources.list$ add deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse$ sudo apt-get update$ sudo apt-get upgrade 安装 gcc 交叉编译工具命名规则交叉编译工具链的命名规则为：arch [-vendor] [-os] [-(gnu)eabi] arch - 体系架构，如ARM，MIPS vendor - 工具链提供商 os - 目标操作系统 eabi - 嵌入式应用二进制接口（Embedded ApplicationBinary Interface） 根据对操作系统的支持与否，ARM GCC可分为支持和不支持操作系统，如arm-none-eabi：这个是没有操作系统的，自然不可能支持那些跟操作系统关系密切的函数，比如fork()。使用的是newlib这个专用于嵌入式系统的C库。arm-none-linux-eabi：用于Linux的，使用Glibc。比如:arm-none-eabi-gcc：用于编译 ARM 架构的裸机系统（包括 ARM Linux 的 boot、kernel，不适用编译 Linux 应用 Application）。arm-none-linux-gnueabi-gcc：主要用于基于 ARM 架构的 Linux 系统，可用于编译 ARM 架构的 u-boot、Linux内核、Linux应用等。arm-eabi-gcc：Android ARM 编译器。armcc ARM：公司推出的编译工具，功能和 arm-none-eabi 类似。arm-none-uclinuxeabi-gcc：用于uCLinux，使用Glibc。arm-none-symbianelf-gcc：用于symbian。下载链接: gcc-toolchain 123$ tar xvf gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabihf.tar.xz -C /usr/local/arm_gcc$ sudo vim /etc/profile$ export PATH=/usr/local/arm_gcc/bin/:$PATH 安装 Minicom12$ sudo apr-get install minicom$ sudo minicom -D /dev/ttySx 编译代码需要在CMakelists.txt中set gcc和g++路径，其余与Linux正常。","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"arm","slug":"arm","permalink":"http://yoursite.com/tags/arm/"},{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]}]}